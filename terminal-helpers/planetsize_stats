#!/usr/bin/php
<?php
/*
    This file is part of Stars Under Attack.

    Stars Under Attack is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Stars Under Attack is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with Stars Under Attack.  If not, see <http://www.gnu.org/licenses/>.
*/
	if(!isset($_SERVER['argv'][1]))
	{
		fputs(STDERR, "Usage: ".$_SERVER['argv'][0]." <Galaxy file name>\n");
		exit(1);
	}

	$width = 120;
	$height = 30;

	$galaxy = new Galaxy($_SERVER["argv"][1]);
	if(!$galaxy->getStatus())
	{
		fputs(STDERR, "Could not open galaxy.\n");
		exit(1);
	}

	$sizes = array();
	$systems_count = $galaxy->getSystemsCount();
	for($system=1; $system<=$systems_count; $system++)
	{
		$planets_count = $galaxy->getPlanetsCount($system);
		for($planet=1; $planet<=$planets_count; $planet++)
		{
			$size = $galaxy->getPlanetSize($system, $planet);
			if(!isset($sizes[$size])) $sizes[$size] = 0;
			$sizes[$size]++;
		}
	}

	if(!count($sizes))
	{
		fputs(STDERR, "No planets found.\n");
		exit(1);
	}

	$max_size = max(array_keys($sizes));
	$min_size = min(array_keys($sizes));
	$virt_max_size = $max_size-$min_size;

	$diagram = array_pad(array(), $width, 0);
	foreach($sizes as $size=>$number)
	{
		$round = round($width * ($size-$min_size)/$virt_max_size);
		$floor = floor($round);
		$ceil = $floor+1;
		$diagram[$floor] += $number*(1-($round-$floor));
		$diagram[$ceil] += $number*(1-($ceil-$round));
	}

	$max = max($diagram);
	foreach($diagram as $i=>$v)
		$diagram[$i] = round($height*$v/$max);

	for($i=$height; $i>0; $i--)
	{
		foreach($diagram as $v)
		{
			if($v >= $i) echo "#";
			else echo " ";
		}
		echo "\n";
	}

	echo "\n";
	echo "max: ".$max_size."; min: ".$min_size."\n";

	class Galaxy
	{
		private $status = false;
		private $file_pointer = false;
		private $cache = array();
		private $filesize = false;
		private $filename = false;

		function __construct($filename)
		{
			$this->filename = $filename;
			if(is_file($this->filename) && is_readable($this->filename))
			{
				$this->file_pointer = fopen($this->filename, 'r');
				flock($this->file_pointer, LOCK_SH);
				$this->status = true;
				$this->filesize = filesize($this->filename);
			}
		}

		function __destruct()
		{
			if($this->status)
			{
				flock($this->file_pointer, LOCK_UN);
				fclose($this->file_pointer);
				$this->status = false;
			}
		}

		function getStatus()
		{
			return $this->status;
		}

		function getSystemsCount()
		{
			if(!$this->status) return false;
			return 999;
		}

		private function seekSystem($system)
		{
			if(!$this->status) return false;

			$system = (int) $system;
			if($system < 1) return false;

			$pos = ($system-1)*1655;
			if($this->filesize < $pos+1655) return false; # System existiert nicht

			fseek($this->file_pointer, $pos, SEEK_SET);
			return true;
		}

		function getPlanetsCount($system)
		{
			if(!$this->status) return false;

			$system = (int) $system;

			if(!isset($this->cache['getPlanetsCount'])) $this->cache['getPlanetsCount'] = array();
			if(!isset($this->cache['getPlanetsCount'][$system]))
			{
				if(!$this->seekSystem($system)) return false;
				$this->cache['getPlanetsCount'][$system] = (ord(fread($this->file_pointer, 1))>>3)+10;
			}
			return $this->cache['getPlanetsCount'][$system];
		}

		function _getPlanetOwner($system, $planet)
		{
			if(!$this->status) return false;

			$planet = (int) $planet;
			$system = (int) $system;

			if(!isset($this->cache['getPlanetOwner'])) $this->cache['getPlanetOwner'] = array();
			if(!isset($this->cache['getPlanetOwner'][$system])) $this->cache['getPlanetOwner'][$system] = array();
			if(!isset($this->cache['getPlanetOwner'][$system][$planet]))
			{
				$planets_count = $this->getPlanetsCount($system);
				if(!$planets_count) return false;
				if($planet > $planets_count || $planet < 1) return false;

				if(!$this->seekSystem($system)) return false;

				fseek($this->file_pointer, 35+($planet-1)*24, SEEK_CUR);
				$this->cache['getPlanetOwner'][$system][$planet] = trim(fread($this->file_pointer, 24));
			}
			return $this->cache['getPlanetOwner'][$system][$planet];
		}

		function getPlanetOwner($system, $planet)
		{
			if(!$this->status) return false;

			$owner = $this->_getPlanetOwner($system, $planet);
			if(!$owner) return $owner;
			return preg_replace('/ \([Ug]\)$/', '', $owner);
		}

		function getPlanetOwnerFlag($system, $planet)
		{
			if(!$this->status) return false;

			$owner = $this->_getPlanetOwner($system, $planet);
			if($owner === false) return false;
			elseif(!$owner) return '';
			if(preg_match('/ \(([Ug])\)$/', $owner, $result))
				return $result[1];
			else return '';
		}

		function getPlanetName($system, $planet)
		{
			if(!$this->status) return false;

			$planet = (int) $planet;
			$system = (int) $system;

			if(!isset($this->cache['getPlanetName'])) $this->cache['getPlanetName'] = array();
			if(!isset($this->cache['getPlanetName'][$system])) $this->cache['getPlanetName'][$system] = array();
			if(!isset($this->cache['getPlanetName'][$system][$planet]))
			{
				$planets_count = $this->getPlanetsCount($system);
				if(!$planets_count) return false;
				if($planet > $planets_count || $planet < 1) return false;

				if(!$this->seekSystem($system)) return false;

				fseek($this->file_pointer, 755+($planet-1)*24, SEEK_CUR);
				$this->cache['getPlanetName'][$system][$planet] = trim(fread($this->file_pointer, 24));
			}
			return $this->cache['getPlanetName'][$system][$planet];
		}

		function getPlanetOwnerAlliance($system, $planet)
		{
			if(!$this->status) return false;

			$planet = (int) $planet;
			$system = (int) $system;

			if(!isset($this->cache['getPlanetOwnerAlliance'])) $this->cache['getPlanetOwnerAlliance'] = array();
			if(!isset($this->cache['getPlanetOwnerAlliance'][$system])) $this->cache['getPlanetOwnerAlliance'][$system] = array();
			if(!isset($this->cache['getPlanetOwnerAlliance'][$system][$planet]))
			{
				$planets_count = $this->getPlanetsCount($system);
				if(!$planets_count) return false;
				if($planet > $planets_count || $planet < 1) return false;

				if(!$this->seekSystem($system)) return false;

				fseek($this->file_pointer, 1475+($planet-1)*6, SEEK_CUR);
				$this->cache['getPlanetOwnerAlliance'][$system][$planet] = trim(fread($this->file_pointer, 6));
			}
			return $this->cache['getPlanetOwnerAlliance'][$system][$planet];
		}

		function getPlanetSize($system, $planet)
		{
			if(!$this->status) return false;

			$planet = (int) $planet;
			$system = (int) $system;

			if(!isset($this->cache['getPlanetSize'])) $this->cache['getPlanetSize'] = array();
			if(!isset($this->cache['getPlanetSize'][$system])) $this->cache['getPlanetSize'][$system] = array();
			if(!isset($this->cache['getPlanetSize'][$system][$planet]))
			{
				$planets_count = $this->getPlanetsCount($system);
				if(!$planets_count) return false;
				if($planet > $planets_count || $planet < 1) return false;

				if(!$this->seekSystem($system)) return false;

				$bit_position = 5+($planet-1)*9;
				$byte_position = $bit_position%8;
				fseek($this->file_pointer, ($bit_position-$byte_position)/8, SEEK_CUR);
				$bytes = (ord(fread($this->file_pointer, 1)) << 8) | ord(fread($this->file_pointer, 1));
				$bytes = $bytes & ((1 << (16-$byte_position))-1);
				$bytes = $bytes >> (7-$byte_position);
				$bytes += 100;
				$this->cache['getPlanetSize'][$system][$planet] = $bytes;
			}
			return $this->cache['getPlanetSize'][$system][$planet];
		}

		function getPlanetClass($system, $planet)
		{
			if(!$this->status) return false;

			return getPlanetClass($this->galaxy, $system, $planet);
		}
	}

	function getPlanetClass($galaxy, $system, $planet)
	{
		$type = (((floor($system/100)+1)*(floor(($system%100)/10)+1)*(($system%10)+1))%$planet)*$planet+($system%(($galaxy+1)*$planet));
		return $type%20+1;
	}
?>